
let config_mk = "config.mk"
let config_h = "xenlight/config.h"

(* Configure script *)
open Cmdliner

let info =
  let doc = "Configures a package" in
  Term.info "configure" ~version:"0.1" ~doc 

let output_file filename lines =
  let oc = open_out filename in
  let lines = List.map (fun line -> line ^ "\n") lines in
  List.iter (output_string oc) lines;
  close_out oc

let compile_program verbose what c_program =
  let c_file = Filename.temp_file what ".c" in
  let o_file = c_file ^ ".o" in
  output_file c_file c_program;
  let found = Sys.command (Printf.sprintf "cc -c %s -o %s %s" c_file o_file (if verbose then "" else "2>/dev/null")) = 0 in
  if Sys.file_exists c_file then Sys.remove c_file;
  if Sys.file_exists o_file then Sys.remove o_file;
  Printf.printf "Looking for %s: %s\n" what (if found then "ok" else "missing");
  found

let find_header verbose name =
  compile_program verbose name [
    Printf.sprintf "#include <%s>" name;
    "int main(int argc, const char *argv){";
    "return 0;";
    "}";
  ]

let find_definition verbose lib ty name =
  compile_program verbose name [
    Printf.sprintf "#include <%s>" lib;
    "int main(int argc, const char *argv){";
    Printf.sprintf "%s x = %s;" ty name;
    "return 0;";
    "}";
  ]

let find_field verbose lib ty f v =
  compile_program verbose f [
    Printf.sprintf "#include <%s>" lib;
    "int main(int argc, const char *argv){";
    Printf.sprintf "%s x;" ty;
    Printf.sprintf "x.%s = %s;" f v;
    "return 0;";
    "}";
  ]

let disable_xenctrl =
  let doc = "Disable the xenctrl library" in
  Arg.(value & flag & info ["disable-xenctrl"] ~docv:"DISABLE_XENCTRL" ~doc)

let configure verbose disable_xenctrl =
  let xenctrl  = find_header verbose "xenctrl.h" in
  let xenlight = find_header verbose "libxl.h" in
  if not xenctrl then begin
    Printf.fprintf stderr "Failure: we can't build anything without xenctrl.h\n";
    exit 1;
  end;
  (* Sanity check the mechanism with a definition that should exist *)
  let libxl_shutdown_reason_poweroff = find_definition verbose "libxl.h" "libxl_shutdown_reason" "LIBXL_SHUTDOWN_REASON_POWEROFF" in
  if not libxl_shutdown_reason_poweroff then begin
    Printf.fprintf stderr "Failure: we can't find LIBXL_SHUTDOWN_REASON_POWEROFF\n";
    exit 1;
  end;
  let libxl_shutdown_reason_unknown = find_definition verbose "libxl.h" "libxl_shutdown_reason" "LIBXL_SHUTDOWN_REASON_UNKNOWN" in
  let libxl_device_model_version_unknown = find_definition verbose "libxl.h" "libxl_device_model" "LIBXL_DEVICE_MODEL_VERSION_UNKNOWN" in
  let libxl_console_type_unknown = find_definition verbose "libxl.h" "libxl_console_type" "LIBXL_CONSOLE_TYPE_UNKNOWN" in
  let libxl_nic_type_unknown = find_definition verbose "libxl.h" "libxl_nic_type" "LIBXL_NIC_TYPE_UNKNOWN" in
  let libxl_timer_mode_unknown = find_definition verbose "libxl.h" "libxl_timer_mode" "LIBXL_TIMER_MODE_UNKNOWN" in
  let libxl_bios_type_unknown = find_definition verbose "libxl.h" "libxl_bios_type" "LIBXL_BIOS_TYPE_UNKNOWN" in
  let libxl_dominfo_domid = find_field verbose "libxl.h" "libxl_dominfo" "domid" "0" in
  if not libxl_dominfo_domid then begin
    Printf.fprintf stderr "Failure: we can't find libxl_dominfo.domid\n";
    exit 1;
  end;
  let libxl_dominfo_domain_type = find_field verbose "libxl.h" "libxl_dominfo" "domain_type" "LIBXL_DOMAIN_TYPE_INVALID" in
  output_file config_mk
    [ "# Warning - this file is autogenerated by the configure script";
      "# Do not edit";
      Printf.sprintf "ENABLE_XENLIGHT=--%s-xenlight" (if xenlight then "enable" else "disable");
      Printf.sprintf "ENABLE_XENCTRL=--%s-xenctrl" (if disable_xenctrl then "disable" else "enable");
    ];
  output_file config_h
    [ "/* Warning - this file is autogenerated by the configure script";
      "   do not edit */";
      (if libxl_shutdown_reason_unknown then "#define" else "#undef") ^ " HAS_LIBXL_SHUTDOWN_REASON_UNKNOWN";
      (if libxl_device_model_version_unknown then "#define" else "#undef") ^ " HAS_LIBXL_DEVICE_MODEL_VERSION_UNKNOWN";
      (if libxl_console_type_unknown then "#define" else "#undef") ^ " HAS_LIBXL_CONSOLE_TYPE_UNKNOWN";
      (if libxl_nic_type_unknown then "#define" else "#undef") ^ " HAS_LIBXL_NIC_TYPE_UNKNOWN";
      (if libxl_timer_mode_unknown then "#define" else "#undef") ^ " HAS_LIBXL_TIMER_MODE_UNKNOWN";
      (if libxl_bios_type_unknown then "#define" else "#undef") ^ " HAS_LIBXL_BIOS_TYPE_UNKNOWN";
      (if libxl_dominfo_domain_type then "#define" else "#undef") ^ " HAS_LIBXL_DOMINFO_DOMAIN_TYPE";
    ]

let arg =
  let doc = "enable verbose printing" in
  Arg.(value & flag & info ["verbose"; "v"] ~doc)

let configure_t = Term.(pure configure $ arg $ disable_xenctrl)

let () = 
  match 
    Term.eval (configure_t, info) 
  with
  | `Error _ -> exit 1 
  | _ -> exit 0
